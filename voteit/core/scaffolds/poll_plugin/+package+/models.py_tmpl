import colander
import deform
from pyramid.renderers import render
from voteit.core.models.poll_plugin import PollPlugin

from {{package}} import {{package}}_MF as _


class MyPollPlugin(PollPlugin):
    """ A custom poll plugin. """

    name = 'MyPollPlugin'
    title = _(u'My Poll Plugin')
    description = _(u"An example plugin for VoteIT.")

    def get_vote_schema(self):
        """ Return the schema of how a vote should be structured.
            This is used to render a voting form.
        """
        proposals = self.context.get_proposal_objects()
        #Choices should be something iterable with the contents [(UID for proposal, Title of proposal), <etc...>, ]
        choices = set()
        for prop in proposals:
            choices.add((prop.uid, prop.title))

        poll_wf_state = self.context.get_workflow_state()
        if poll_wf_state == 'ongoing':
            proposal_title = _(u"Vote for one")
        else:
            proposal_title = _(u"You can't change your vote now.")

        class Schema(colander.Schema):
            proposal = colander.SchemaNode(
                            colander.String(),
                            validator=colander.OneOf([x[0] for x in choices]),
                            widget=deform.widget.RadioChoiceWidget(values=choices),
                            title=proposal_title,
                            description=u'',)
        return Schema()

    def get_settings_schema(self):
        """ Get an instance of the schema used to render a form for editing settings.
            If this is None, this poll method doesn't have any settings.
        """
        return None # pragma : no cover

    def handle_close(self):
        """ Example close action
            Get the calculated result of this ballot.
            We'll update the ballots with percentage and simply return them.
        """
        ballots = self.context.ballots
        results = []
        if ballots:
            total_votes = sum([x[1] for x in ballots])
            for (uid, count) in ballots:
                result = {}
                result['uid'] = uid
                result['count'] = count
                results.append(result)
        from operator import itemgetter
        self.context.poll_result = sorted(results, key=itemgetter('count'), reverse=True)

    def render_result(self, request, complete=True):
        """ Return rendered html with result display. Called by the poll view
            when the poll has finished.
            context in this template will be the poll.
        """
        response = dict(
            result = self.context.poll_result,
            get_proposal_by_uid = self.context.get_proposal_by_uid,
        )
        return render('result.pt', response, request = request)
